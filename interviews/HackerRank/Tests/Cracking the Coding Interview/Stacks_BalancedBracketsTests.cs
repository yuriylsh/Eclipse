using FluentAssertions;
using Solutions.Cracking_the_Coding_Interview;
using Xunit;

namespace Tests
{
    public class Stacks_BalancedBracketsTests
    {
        [Theory]
        [InlineData("(")]
        [InlineData(")")]
        [InlineData("[")]
        [InlineData("]")]
        [InlineData("{")]
        [InlineData("}")]
        public void IsBalanced_GivenSingleBracket_ReturnsFalse(string brackets)
        {
            var isBalanced = Brackets.IsBalanced(brackets);

            isBalanced.Should().BeFalse();
        }

        [Theory]
        [InlineData("(")]
        [InlineData("(])")]
        [InlineData("{{}}]")]
        [InlineData("([([{}])]){")]
        public void IsBalanced_OddNumberOfBrackets_ReturnsFalse(string brackets)
        {
            var isBalanced = Brackets.IsBalanced(brackets);

            isBalanced.Should().BeFalse();
        }

        [Theory]
        [InlineData("()")]
        [InlineData("([])")]
        [InlineData("{}([][])")]
        [InlineData("{{}}")]
        [InlineData("([([{}])])")]
        [InlineData("{[()]}")]
        [InlineData("{{[[(())]]}}")]
        public void IsBalanced_EvenNumberOfBalancedBrackets_ReturnsTrue(string brackets)
        {
            var isBalanced = Brackets.IsBalanced(brackets);

            isBalanced.Should().BeTrue();
        }

        [Theory]
        [InlineData("(}")]
        [InlineData("([))")]
        [InlineData("[{}}")]
        [InlineData("{[(])}")]
        [InlineData("[{")]
        [InlineData("}]")]
        public void IsBalanced_EvenNumberOfUnbalancedBrackets_ReturnsFalse(string brackets)
        {
            var isBalanced = Brackets.IsBalanced(brackets);

            isBalanced.Should().BeFalse();
        }

        [Theory]
        [InlineData("[()][{}()][](){}([{}(())([[{}]])][])[]([][])(){}{{}{[](){}}}()[]({})[{}{{}([{}][])}]", "YES")]
        [InlineData("[()][{}[{}[{}]]][]{}[]{}[]{{}({}(){({{}{}[([[]][[]])()]})({}{{}})})}", "YES")]
        [InlineData("(])[{{{][)[)])(]){(}))[{(})][[{)(}){[(]})[[{}(])}({)(}[[()}{}}]{}{}}()}{({}](]{{[}}(([{]", "NO")]
        [InlineData("){[]()})}}]{}[}}})}{]{](]](()][{))])(}]}))(}[}{{)}{[[}[]", "NO")]
        [InlineData("}(]}){", "NO")]
        [InlineData("((]()(]([({]}({[)){}}[}({[{])(]{()[]}}{)}}]]{({)[}{(", "NO")]
        [InlineData("{}{({{}})}[][{{}}]{}{}(){{}[]}{}([[][{}]]())", "YES")]
        [InlineData("(){}[()[][]]{}(())()[[([])][()]{}{}(({}[]()))()[()[{()}]][]]", "YES")]
        [InlineData("()([]({}[]){}){}{()}[]{}[]()(()([[]]()))()()()[]()(){{}}()({[{}][]}[[{{}({({({})})})}]])", "YES")]
        [InlineData("[]([{][][)(])}()([}[}(})}])}))]](}{}})[]({{}}))[])(}}[[{]{}]()[(][])}({]{}[[))[[}[}{(]})()){{(]]){][", "NO")]
        [InlineData("{()({}[[{}]]()(){[{{}{[[{}]{}((({[]}{}()[])))]((()()))}(()[[[]]])((()[[](({([])()}))[]]))}]})}", "YES")]
        [InlineData("()(){{}}[()()]{}{}", "YES")]
        [InlineData("{}()([[]])({}){({[][[][[()]]{{}[[]()]}]})}[](())((())[{{}}])", "YES")]
        [InlineData("{}(((){}){[]{{()()}}()})[]{{()}{(){()(){}}}}{()}({()(()({}{}()((()((([])){[][{()}{}]})))))})", "YES")]
        [InlineData("][[{)())))}[)}}}}[{){}()]([][]){{{{{[)}]]{([{)()][({}[){]({{", "NO")]
        [InlineData("{{}(", "NO")]
        [InlineData("{[{((({}{({({()})()})[]({()[[][][]]}){}}))){}}]}{}{({((){{}[][]{}[][]{}}[{}])(())}[][])}", "YES")]
        [InlineData("()[[][()[]][]()](([[[(){()[[]](([]))}]]]))", "YES")]
        [InlineData("()[]({}{})(()){{{}}()()}({[]()}())[](){}(({()}[{}[{({{}}){({}){({})((({()})))}}}]]))", "YES")]
        [InlineData("}[{){({}({)})]([}{[}}{[(([])[(}){[]])([]]}(]]]]{][", "NO")]
        [InlineData("[{]{[{(){[}{}(([(]}])(){[[}(]){(})))}}{{)}}{}][({(}))]}({)", "NO")]
        [InlineData(")})[(]{][[())]{[]{{}}[)[)}[]){}](}({](}}}[}{({()]]", "NO")]
        [InlineData("[[[({[]}({[][[[[][[{(()[][])}()[][]][]{}]]]]}))][(()){}]]]()[{}([]{}){}{{}}]", "YES")]
        [InlineData("({[]({[]})}())[][{}[{{(({{{([{}])}}}))}}]]", "YES")]
        [InlineData("([((()))()])[][][]{}()(([]))[]()[]((){}[]){}(){{}[]}[[{[]}]]", "YES")]
        [InlineData("[[(((({}{[]{}()}){}{{}}){({[]{[{}]{(){}(((){()}))}()}}[[]]()()[()])[[{}{}]()]}))]]{}[]{}({({{}})})", "YES")]
        [InlineData("(]{()}((", "NO")]
        [InlineData("[][(())[({{{()[]}}{[[][[][[[]{{{[()]{{{{}{[]}[][]}}}}}}]]]]}})]]", "YES")]
        [InlineData("}[})})}[)]{}{)", "NO")]
        [InlineData("({(}{})))}(}[)[}{)}}[)[{][{(}{{}]({}{[(})[{[({{[}{(]]})}", "NO")]
        [InlineData("]}})[]))]{][])[}(])]({[]}[]([)", "NO")]
        [InlineData("[{{}{[{{[}[[}([]", "NO")]
        [InlineData("[([]){}][({})({[(([])[][])][[{}{([{{}{(()){{{({}{{}}())}}[]}}()[()[{{{([](()){[[[]]]})}}}]]}])}]]})]", "YES")]
        [InlineData("]{}{(}))}](})[{]]()(]([}]([}][}{]{[])}{{{]([][()){{})[{({{{[}{}](]}}", "NO")]
        [InlineData("{[{}}){(}[][)(}[}][)({[[{]}[(()[}}){}{)([)]}(()))]{)(}}}][", "NO")]
        [InlineData("(]{}{(}}}[)[", "NO")]
        [InlineData("[]{}{[[]]}([{}]{}[]){{(())}}", "YES")]
        [InlineData("[)([{(][(){)[)}{)]]}}([((][[}}(]{}]]}]][(({{{))[[){}{]][))[]{]][)[{{}{()]){)])))){{{[(]}[}}{}]", "NO")]
        [InlineData("{({(){[[[][]{}[[([]{})]{}]][[]()()]]}})}[{}{{}}]", "YES")]
        [InlineData(")}][(})){))[{}[}", "NO")]
        [InlineData("{[]{({]}[}}[{([([)([){{}{(}}[]}}[[{[}[[()(])[}[]", "NO")]
        [InlineData("()()()[]", "YES")]
        [InlineData("((){}])][]][}{]{)]]}][{]}[)(])[}[({(", "NO")]
        [InlineData(")[((])(]]]]((]){{{{())]}]}(}{([}(({}]])[[{){[}]{{}})[){(", "NO")]
        [InlineData("}][[{[((}{[]){}}[[[)({[)}]]}(]]{[)[]}{}(){}}][{()]))})]][(((}}", "NO")]
        [InlineData("([]){}{{}{}}()([([{}{[[]()([(([]()))()[[]]])]}])])", "YES")]
        [InlineData("[()[[]{{[]}()([])}[]][][]][]()[]{}{}[][]{}{}[()(){}]", "YES")]
        [InlineData("{[{){]({(((({](]{([])([{{([])[}(){(]](]{[{[]}}())[){})}))[{})))[", "NO")]
        [InlineData("{}[()[]][]{}{}[[{{[[({})]()[[()]]]}}]]", "YES")]
        [InlineData("{[{}[][]]}[((()))][]({})[]{}{()}", "YES")]
        [InlineData("(){[{({})}]}", "YES")]
        [InlineData("([]])][{)]({)[]))}]())[}]))][}{(}}})){]}]{[)}(][})[[", "NO")]
        [InlineData("((({{}(([{}(())]))[()]{[[[]()]]}})))", "YES")]
        [InlineData("}()))}(}]]{{})}][{](]][{]{[[]]]}]]}([)({([))[[(]}])}[}(([{)[)]]([[](]}]}{]{{})[]){]}{])(", "NO")]
        [InlineData("{}{}{}{[[()]][]}", "YES")]
        [InlineData(")]}]({{})[[[{]{{{}}][))]{{", "NO")]
        [InlineData("))){({}])}])}}]{)()(}(]}([", "NO")]
        [InlineData("([[]][])[[]()][]()(([[]]{[()[]{[][{}]}[()]]{}{[]}}{{}()}(()[([][]{})[[{}][]]{}[]])))", "YES")]
        [InlineData("(]{[({}[){)))}]{[{}][({[({[]))}[}]}{()(([]{]()}})}[]{[)](((]]])([]}}]){)(([]]}[[}[", "NO")]
        [InlineData("([[]])({}(([(){{}[{}]}]){[{}]}))[][{}{}](){}", "YES")]
        [InlineData("[][][][][][([])][]{({()}[[()()]{([(){[]{}}{(())}{[](){}()({}())}[({}[[]()])][]])}])}", "YES")]
        [InlineData("}[{{(}})}}(((())()({]{([]((][(({)[({[]]}[])}]{][{{}]{)][}(])}}}))}}}", "NO")]
        [InlineData("[]({})()[]{}{}[]({}{})[]{([])()[()][{()({})[{}{[[()]{}[]][]}(({{[]{()()()}{}[]()}[]}){{}{}})]}]}", "YES")]
        [InlineData("{{(([{)]{}({][{](){({([[[][)}[)})(", "NO")]
        [InlineData("[{}]{[()({[{}]})]}", "YES")]
        [InlineData("[[{}]]", "YES")]
        [InlineData("]{{({[{]}[[)]]}{}))}{){({]]}{]([)({{[]){)]{}){){}()})(]]{{])(])[]}][[()()}", "NO")]
        [InlineData("{[([}[[{{(]]][}()())]{){(){)]]){})}]{][][(}[]())[}[)})})[][{[)[})()][]))}[[}", "NO")]
        [InlineData("]()])}[}}}{]]{)[}(}]]])])}{(}{([{]({)]}])(})[{}[)]])]}[]{{)){}{()}]}((}}{({])[}])[]}", "NO")]
        [InlineData("(]}[{}{{][}))){{{([)([[])([]{[", "NO")]
        [InlineData("{(()[]){}}(){[]}({{}(()())})([]){}{}(())()[()]{}()", "YES")]
        [InlineData("{{}[{}[{}[]]]}{}({{[]}})[[(){}][]]{}(([]{[][]()()}{{{()()}{[]}({}[]{()})}{()}[[]][()]}))", "YES")]
        [InlineData("{[][]}[{}[](){}]{{}{[][{}]}}", "YES")]
        [InlineData("()(){}(){((){}[])([[]]())}", "YES")]
        [InlineData("{}[[{[((}[(}[[]{{]([(}]][[", "NO")]
        [InlineData("{}[([{[{{}()}]{}}([[{}[]]({}{{()}[][][]})])])]", "YES")]
        [InlineData("{[](}([)(])[]]})()]){[({]}{{{)({}(][{{[}}(]{", "NO")]
        [InlineData("[][]{{}[](())}{}({[()]}())[][[][({}([{}]))]]", "YES")]
        [InlineData("((()))[]{[(()({[()({[]}{})]}))]}{[]}{{({}{})[{}{}]{()([()])[{()}()[[]{}()]{}{}[]()]}[[]{[]}([])]}}", "YES")]
        public void IsBalanced_HackerRankTest4_ReturnsCorrectResult(string brackets, string expectedAnswer)
        {
            var isBalanced = Brackets.IsBalanced(brackets);

            string answer = isBalanced ? "YES" : "NO";

            answer.Should().Be(expectedAnswer);
        }

        [Theory]
        [InlineData("()[{}()]([[][]()[[]]]{()})([]()){[]{}}{{}}{}(){([[{}([]{})]])}", "YES")]
        [InlineData("{][({(}]][[[{}]][[[())}[)(]([[[)][[))[}[]][()}))](]){}}})}[{]{}{((}]}{{)[{[){{)[]]}))]()]})))[", "NO")]
        [InlineData("[)](][[([]))[)", "NO")]
        [InlineData("]}]){[{{){", "NO")]
        [InlineData("{[(}{)]]){(}}(][{{)]{[(((}{}{)}[({[}[}((}{()}[]})]}]]))((]][[{{}[(}})[){()}}{(}{{({{}[[]})]{((]{[){[", "NO")]
        [InlineData("()}}[(}])][{]{()([}[}{}[{[]{]](]][[))(()[}(}{[{}[[]([{](]{}{[){()[{[{}}{[{()(()({}([[}[}[{(]})", "NO")]
        [InlineData("){[])[](){[)}[)]}]]){](]()]({{)(]])(]{(}(}{)}])){[{}((){[({(()[[}](]})]}({)}{)]{{{", "NO")]
        [InlineData("[(})])}{}}]{({[]]]))]})]", "NO")]
        [InlineData("[{", "NO")]
        [InlineData("{}([{()[]{{}}}])({})", "YES")]
        [InlineData("{({}{[({({})([[]])}({}))({})]})}", "YES")]
        [InlineData("()[]", "YES")]
        [InlineData("{)[])}]){){]}[(({[)[{{[((]{()[]}][([(]}{](])()(}{(]}{})[)))[](){({)][}()((", "NO")]
        [InlineData("[][(([{}])){}]{}[()]{([[{[()]({}[])()()}[{}][]]])}", "YES")]
        [InlineData("(}]}", "NO")]
        [InlineData("(([{()}]))[({[{}{}[]]{}})]{((){}{()}){{}}}{}{{[{[][]([])}[()({}())()({[]}{{[[]]([])}})()]]}}", "YES")]
        [InlineData("[(([){[](}){){]]}{}([](([[)}[)})[(()[]){})}}]][({[}])}{(({}}{{{{])({]]}[[{{(}}][{)([)]}}", "NO")]
        [InlineData("()()[()([{[()][]{}(){()({[]}[(((){(())}))]()){}}}])]", "YES")]
        [InlineData("({)}]}[}]{({))}{)]()(](])})][(]{}{({{}[]{][)){}{}))]()}((][{]{]{][{}[)}}{)()][{[{{[[", "NO")]
        [InlineData(")}(()[])(}]{{{}[)([})]()}()]}(][}{){}}})}({](){([()({{(){{", "NO")]
        [InlineData("}([]]][[){}}[[)}[(}(}]{(}[{}][{}](}]}))]{][[}(({(]}[]{[{){{(}}[){[][{[]{[}}[)]}}]{}}(}", "NO")]
        public void IsBalanced_HackerRankTest5_ReturnsCorrectResult(string brackets, string expectedAnswer)
        {
            var isBalanced = Brackets.IsBalanced(brackets);

            string answer = isBalanced ? "YES" : "NO";

            answer.Should().Be(expectedAnswer);
        }
    }
}